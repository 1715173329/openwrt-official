From 137e68659e90b242049bfd1fab2700bbcf476140 Mon Sep 17 00:00:00 2001
From: Cristian Marussi <cristian.marussi@arm.com>
Date: Tue, 16 Mar 2021 12:48:44 +0000
Subject: [PATCH] firmware: arm_scmi: Remove legacy scmi_clk_ops protocol
 interface

Now that all the SCMI driver users have been migrated to the new interface
remove the legacy interface and all the transient code.

Link: https://lore.kernel.org/r/20210316124903.35011-20-cristian.marussi@arm.com
Tested-by: Florian Fainelli <f.fainelli@gmail.com>
Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
---
 drivers/firmware/arm_scmi/clock.c | 67 -------------------------------
 include/linux/scmi_protocol.h     | 15 -------
 2 files changed, 82 deletions(-)

--- a/drivers/firmware/arm_scmi/clock.c
+++ b/drivers/firmware/arm_scmi/clock.c
@@ -236,16 +236,6 @@ scmi_clock_rate_get(const struct scmi_pr
 	return ret;
 }
 
-static int
-__scmi_clock_rate_get(const struct scmi_handle *handle,
-		      u32 clk_id, u64 *value)
-{
-	const struct scmi_protocol_handle *ph =
-		scmi_map_protocol_handle(handle, SCMI_PROTOCOL_CLOCK);
-
-	return scmi_clock_rate_get(ph, clk_id, value);
-}
-
 static int scmi_clock_rate_set(const struct scmi_protocol_handle *ph,
 			       u32 clk_id, u64 rate)
 {
@@ -281,15 +271,6 @@ static int scmi_clock_rate_set(const str
 	return ret;
 }
 
-static int __scmi_clock_rate_set(const struct scmi_handle *handle,
-				 u32 clk_id, u64 rate)
-{
-	const struct scmi_protocol_handle *ph =
-		scmi_map_protocol_handle(handle, SCMI_PROTOCOL_CLOCK);
-
-	return scmi_clock_rate_set(ph, clk_id, rate);
-}
-
 static int
 scmi_clock_config_set(const struct scmi_protocol_handle *ph, u32 clk_id,
 		      u32 config)
@@ -318,27 +299,11 @@ static int scmi_clock_enable(const struc
 	return scmi_clock_config_set(ph, clk_id, CLOCK_ENABLE);
 }
 
-static int __scmi_clock_enable(const struct scmi_handle *handle, u32 clk_id)
-{
-	const struct scmi_protocol_handle *ph =
-		scmi_map_protocol_handle(handle, SCMI_PROTOCOL_CLOCK);
-
-	return scmi_clock_enable(ph, clk_id);
-}
-
 static int scmi_clock_disable(const struct scmi_protocol_handle *ph, u32 clk_id)
 {
 	return scmi_clock_config_set(ph, clk_id, 0);
 }
 
-static int __scmi_clock_disable(const struct scmi_handle *handle, u32 clk_id)
-{
-	const struct scmi_protocol_handle *ph =
-		scmi_map_protocol_handle(handle, SCMI_PROTOCOL_CLOCK);
-
-	return scmi_clock_disable(ph, clk_id);
-}
-
 static int scmi_clock_count_get(const struct scmi_protocol_handle *ph)
 {
 	struct clock_info *ci = ph->get_priv(ph);
@@ -346,14 +311,6 @@ static int scmi_clock_count_get(const st
 	return ci->num_clocks;
 }
 
-static int __scmi_clock_count_get(const struct scmi_handle *handle)
-{
-	const struct scmi_protocol_handle *ph =
-		scmi_map_protocol_handle(handle, SCMI_PROTOCOL_CLOCK);
-
-	return scmi_clock_count_get(ph);
-}
-
 static const struct scmi_clock_info *
 scmi_clock_info_get(const struct scmi_protocol_handle *ph, u32 clk_id)
 {
@@ -366,24 +323,6 @@ scmi_clock_info_get(const struct scmi_pr
 	return clk;
 }
 
-static const struct scmi_clock_info *
-__scmi_clock_info_get(const struct scmi_handle *handle, u32 clk_id)
-{
-	const struct scmi_protocol_handle *ph =
-		scmi_map_protocol_handle(handle, SCMI_PROTOCOL_CLOCK);
-
-	return scmi_clock_info_get(ph, clk_id);
-}
-
-static const struct scmi_clk_ops clk_ops = {
-	.count_get = __scmi_clock_count_get,
-	.info_get = __scmi_clock_info_get,
-	.rate_get = __scmi_clock_rate_get,
-	.rate_set = __scmi_clock_rate_set,
-	.enable = __scmi_clock_enable,
-	.disable = __scmi_clock_disable,
-};
-
 static const struct scmi_clk_proto_ops clk_proto_ops = {
 	.count_get = scmi_clock_count_get,
 	.info_get = scmi_clock_info_get,
@@ -398,7 +337,6 @@ static int scmi_clock_protocol_init(cons
 	u32 version;
 	int clkid, ret;
 	struct clock_info *cinfo;
-	struct scmi_handle *handle;
 
 	ph->xops->version_get(ph, &version);
 
@@ -425,11 +363,6 @@ static int scmi_clock_protocol_init(cons
 	}
 
 	cinfo->version = version;
-
-	/* Transient code for legacy ops interface */
-	handle = scmi_map_scmi_handle(ph);
-	handle->clk_ops = &clk_ops;
-
 	return ph->set_priv(ph, cinfo);
 }
 
--- a/include/linux/scmi_protocol.h
+++ b/include/linux/scmi_protocol.h
@@ -84,19 +84,6 @@ struct scmi_clk_proto_ops {
 	int (*disable)(const struct scmi_protocol_handle *ph, u32 clk_id);
 };
 
-struct scmi_clk_ops {
-	int (*count_get)(const struct scmi_handle *hamdle);
-
-	const struct scmi_clock_info *(*info_get)
-		(const struct scmi_handle *handle, u32 clk_id);
-	int (*rate_get)(const struct scmi_handle *handle, u32 clk_id,
-			u64 *rate);
-	int (*rate_set)(const struct scmi_handle *handle, u32 clk_id,
-			u64 rate);
-	int (*enable)(const struct scmi_handle *handle, u32 clk_id);
-	int (*disable)(const struct scmi_handle *handle, u32 clk_id);
-};
-
 /**
  * struct scmi_perf_proto_ops - represents the various operations provided
  *	by SCMI Performance Protocol
@@ -618,7 +605,6 @@ struct scmi_notify_ops {
  *
  * @dev: pointer to the SCMI device
  * @version: pointer to the structure containing SCMI version information
- * @clk_ops: pointer to set of clock protocol operations
  * @sensor_ops: pointer to set of sensor protocol operations
  * @reset_ops: pointer to set of reset protocol operations
  * @voltage_ops: pointer to set of voltage protocol operations
@@ -638,7 +624,6 @@ struct scmi_notify_ops {
 struct scmi_handle {
 	struct device *dev;
 	struct scmi_revision_info *version;
-	const struct scmi_clk_ops *clk_ops;
 	const struct scmi_sensor_ops *sensor_ops;
 	const struct scmi_reset_ops *reset_ops;
 	const struct scmi_voltage_ops *voltage_ops;
